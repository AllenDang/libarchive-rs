name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

  # Publish to crates.io - Step 1: Publish libarchive2-sys
  publish-sys:
    name: Publish libarchive2-sys to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libssl-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev e2fslibs-dev cmake

      - name: Verify libarchive2-sys version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          SYS_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.name == "libarchive2-sys") | .version')
          if [ "$TAG_VERSION" != "$SYS_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match libarchive2-sys version ($SYS_VERSION)"
            exit 1
          fi

      - name: Publish libarchive2-sys
        run: |
          cd libarchive2-sys
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for crates.io to update
        run: |
          echo "Waiting 60 seconds for crates.io to process libarchive2-sys..."
          sleep 60

  # Publish to crates.io - Step 2: Publish libarchive2
  publish-main:
    name: Publish libarchive2 to crates.io
    runs-on: ubuntu-latest
    needs: publish-sys
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libssl-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev e2fslibs-dev cmake

      - name: Verify libarchive2 version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          MAIN_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.name == "libarchive2") | .version')
          if [ "$TAG_VERSION" != "$MAIN_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match libarchive2 version ($MAIN_VERSION)"
            exit 1
          fi

      - name: Verify dependency versions match
        run: |
          SYS_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.name == "libarchive2-sys") | .version')
          DEP_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "libarchive2") | .dependencies[] | select(.name == "libarchive2-sys") | .req' | sed 's/[^0-9.]//g')
          if [ "$SYS_VERSION" != "$DEP_VERSION" ]; then
            echo "libarchive2-sys version ($SYS_VERSION) does not match dependency requirement ($DEP_VERSION)"
            echo "Please update libarchive2/Cargo.toml to depend on libarchive2-sys version $SYS_VERSION"
            exit 1
          fi

      - name: Run tests
        run: cargo test --all-features

      - name: Publish libarchive2
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Build documentation and deploy to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install libarchive
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libssl-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev e2fslibs-dev cmake

      - name: Build documentation
        run: cargo doc --no-deps --all-features

      - name: Add index.html redirect
        run: |
          echo '<meta http-equiv="refresh" content="0; url=libarchive2/index.html">' > target/doc/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: docs.yourdomain.com # Optional: set custom domain

  # Generate and upload changelog
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation
          submodules: recursive

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: CHANGELOG
          path: CHANGELOG.md
